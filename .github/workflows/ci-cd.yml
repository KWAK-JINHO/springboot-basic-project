name: CI/CD
on:
  push:
    branches: [ main ]
env:
  APP_NAME: springboot_prac
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'corretto'
  SPRING_PROFILES_ACTIVE: dev

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      formattedTime: ${{ steps.current-time.outputs.formattedTime }}

    steps:
      - uses: actions/checkout@v3
      - name: 자바 설정
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      - name: Gradle 빌드
        run: |
          chmod +x gradlew
          export SPRING_PROFILES_ACTIVE=dev
          ./gradlew clean build --stacktrace --info

      - name: 버전 설정 및 JAR 이름 변경
        uses: josStorer/get-current-time@v2.0.2
        id: current-time
        with:
          format: "YYYY-MM-DDTHH-mm-ss"
          utcOffset: "+09:00"

      - name: JAR 파일 이름 변경 및 업로드
        run: |
          JAR_FILE=$(find ./build/libs -name "*.jar" | head -n 1)
          if [[ -z "$JAR_FILE" ]]; then
            exit 1
          fi
          NEW_JAR_PATH="./build/libs/${{ env.APP_NAME }}-${{ steps.current-time.outputs.formattedTime }}.jar"
          mv "$JAR_FILE" "$NEW_JAR_PATH"
          echo "VERSION=${{ steps.current-time.outputs.formattedTime }}" >> $GITHUB_ENV
          echo "JAR_PATH=$NEW_JAR_PATH" >> $GITHUB_ENV

      - name: artifact upload
        uses: actions/upload-artifact@v4
        with:
          name: jar-file
          path: ${{ env.JAR_PATH }}
          retention-days: 5

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: AWS 인증정보 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 이전 GitHub Actions IP 제거
        run: |
          OLD_IPS=$(aws ec2 describe-security-groups --group-id ${{ secrets.AWS_SG_ID }} \
            --query 'SecurityGroups[0].IpPermissions[?ToPort==`22` && IpProtocol==`tcp`].IpRanges[*].[CidrIp,Description]' \
            --output text --region ${{ secrets.AWS_REGION }})
          
          while IFS= read -r line; do
            ip=$(echo "$line" | awk '{print $1}')
            description=$(echo "$line" | awk '{$1=""; print $0}' | xargs)
          
            if [[ "$description" == "None" || "$description" == "null" || -z "$description" ]]; then
              aws ec2 revoke-security-group-ingress \
                --group-id ${{ secrets.AWS_SG_ID }} \
                --protocol tcp \
                --port 22 \
                --cidr "$ip" \
                --region ${{ secrets.AWS_REGION }}
            fi
          done <<< "$OLD_IPS"

      - name: GitHub Actions IP 가져오기
        id: ip
        uses: haythem/public-ip@v1.2

      - name: 보안그룹에 GitHub Actions IP 추가
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.AWS_SG_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr "${{ steps.ip.outputs.ipv4 }}/32" \
            --region ${{ secrets.AWS_REGION }}

      - name: artifact download
        uses: actions/download-artifact@v4
        with:
          name: jar-file
          path: .

      - name: setup SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | base64 --decode > /tmp/ssh_key
          chmod 600 /tmp/ssh_key

      - name: JAR 파일 경로 설정
        run: |
          JAR_PATH=$(find . -name "*.jar" | head -n 1)
          if [[ -z "$JAR_PATH" ]]; then
            exit 1
          fi
          echo "JAR_PATH=$JAR_PATH" >> $GITHUB_ENV

      - name: 배포 및 서버 재시작
        run: |
          REMOTE_PATH="/home/ec2-user/springboot_prac/${{ env.APP_NAME }}-${{ needs.build.outputs.formattedTime }}.jar"

          echo "기존 jar 파일 정리 중..."
          ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/ec2-user/springboot_prac
            rm -f *.jar
          EOF

          echo "JAR 파일 전송 중..."
          scp -i /tmp/ssh_key -o StrictHostKeyChecking=no $JAR_PATH ec2-user@${{ secrets.EC2_HOST }}:$REMOTE_PATH

          echo "기존 애플리케이션 종료 및 새 애플리케이션 실행 중..."
          ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << EOF
            cd /home/ec2-user/springboot_prac

            pkill -f "${{ env.APP_NAME }}" || echo "실행 중인 프로세스 없음"
            sleep 5

            echo "Spring Boot 애플리케이션 실행 중..."
            nohup java -jar $REMOTE_PATH --spring.profiles.active=${{ env.SPRING_PROFILES_ACTIVE }} > /home/ec2-user/app.log 2>&1 & disown
            exit
            EOF
  
                      echo "배포 완료."